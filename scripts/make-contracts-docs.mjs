import { join, parse } from "path";
import { createInterface } from "readline";
import pkg from "fs-extra";
import glob from "glob";

const { readdir, createReadStream, writeFile, copy, copyFile, readFile } = pkg;
// This script is not part of faast.js, but rather a tool to rewrite some parts
// of the generated docs from api-generator and api-documenter so they work with
// the website generated by docusaurus.

const outDir = "./docs/contracts";
const packageRoot = "./submodules/contracts";
const inDir = packageRoot + "/docs";
const readmePath = packageRoot + "/README.md";

const designInDir = packageRoot + "/contracts";
const designOutDir = outDir + "/design";

pkg.rmdirSync(outDir, { recursive: true, force: true });

pkg.ensureDirSync(outDir);
pkg.ensureDirSync(designOutDir);

async function copyDesignDocs() {
  await glob(designInDir + "/**/*.md", {}, (err, files) => {
    files.map((file) => {
      const filename = file.split("/").pop();
      copyFile(
        file,
        join(
          outDir,
          `design/${filename.charAt(0).toUpperCase() + filename.slice(1)}`,
        ),
      );
    });
  });

  const assetsDir = packageRoot + "/assets";
  const assetsOutDir = "./static/assets";
  await copy(assetsDir, assetsOutDir);
}

async function main() {
  await copyDesignDocs();

  const docFiles = await readdir(inDir);
  for (const docFile of docFiles) {
    try {
      const { name: id, ext } = parse(docFile);
      if (ext !== ".md") {
        continue;
      }

      const docPath = join(inDir, docFile);
      const docPathOut = join(outDir, docFile);
      const input = createReadStream(docPath);
      const output = [];
      const lines = createInterface({
        input,
        crlfDelay: Infinity,
      });

      let title = "";
      lines.on("line", (line) => {
        let skip = false;
        if (!title) {
          const titleLine = line.match(/# (.*)/);
          if (titleLine) {
            title = titleLine[1];
          }
        }

        const homeLink = line.match(/\[Home\]\(.\/index\.md\) &gt; (.*)/);
        if (homeLink) {
          //skip the breadcrumb line alltogether
          return;
        }
        // See issue #4. api-documenter expects \| to escape table
        // column delimiters, but docusaurus uses a markdown processor
        // that doesn't support this. Replace with an escape sequence
        // that renders |.
        if (line.startsWith("|")) {
          line = line.replace(/\\\|/g, "&#124;");
        }
        if (line.includes("<b>")) {
          line = line.replace(/<b>/g, "**");
        }
        if (line.includes("</b>")) {
          line = line.replace(/<\/b>/g, "**");
        }
        if (line.includes("<!-- -->")) {
          line = line.replace(/<!-- -->/g, "");
        }

        const linksToFix = [
          "forum post",
          "EIP 1167",
          "EIP-2612",
          "ERC721",
          "EIP 712",
          "`eth_signTypedDataV4` in MetaMask",
          "merkle-distributor",
          "EIP",
          "`URLSearchParams`",
          "merkletreejs",
          "How to implement supply mechanisms",
          "Reentrancy After Istanbul",
        ];

        for (const link of linksToFix) {
          if (line.includes(`[${link}]`)) {
            // Delete the link
            line = line.replace(`[${link}]`, "");
          }
        }

        output.push(line);
      });

      await new Promise((resolve) => lines.once("close", resolve));
      input.close();

      const header = [
        "---",
        `slug: /${id}`,
        `title: ${title}`,
        `hide_title: true`,
        `displayed_sidebar: contracts`,
        "---",
      ];

      await writeFile(docPathOut, header.concat(output).join("\n"));
    } catch (err) {
      console.error(`Could not process ${docFile}: ${err}`);
    }
  }
  await copyReadMe();
}

main();

async function copyReadMe() {
  const header = [
    "---",
    `title: Web3sdks Contracts`,
    `hide_title: true`,
    `displayed_sidebar: contracts`,
    "---",
  ];
  const fileContents = await readFile(readmePath, "utf8");
  await writeFile(
    join(outDir, "index.md"),
    header.join("\n") + "\n" + fileContents,
  );
}
