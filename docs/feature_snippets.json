{
  "ContractMetadata": [
    {
      "name": "get",
      "summary": "Get the metadata of a contract\n\n",
      "remarks": "\n\nGet the metadata of a contract\n\n",
      "examples": {
        "javascript": "const metadata = await contract.metadata.get();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractmetadata.get"
      }
    },
    {
      "name": "set",
      "summary": "Set the metadata of a contract\n\n",
      "remarks": "\n\nOVERWRITE the metadata of a contract\n\n",
      "examples": {
        "javascript": "await contract.metadata.set({\n name: \"My Contract\",\n description: \"My contract description\"\n})"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractmetadata.set"
      }
    },
    {
      "name": "update",
      "summary": "Update the metadata of a contract\n\n",
      "remarks": "\n\nUpdate the metadata of a contract\n\n",
      "examples": {
        "javascript": "await contract.metadata.update({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractmetadata.update"
      }
    }
  ],
  "PlatformFee": [
    {
      "name": "get",
      "summary": "Get the platform fee recipient and basis points *\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const feeInfo = await contract.platformFee.get();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractplatformfee.get"
      }
    }
  ],
  "PrimarySale": [
    {
      "name": "getRecipient",
      "summary": "Get the primary sale recipient.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const salesRecipient = await contract.sales.getRecipient();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractprimarysale.getrecipient"
      }
    },
    {
      "name": "setRecipient",
      "summary": "Set the primary sale recipient\n\n",
      "remarks": null,
      "examples": {
        "javascript": "await contract.sales.setRecipient(recipientWalletAddress);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractprimarysale.setrecipient"
      }
    }
  ],
  "Permissions": [
    {
      "name": "get",
      "summary": "Call this to get a list of addresses that are members of a specific role.\n\n",
      "remarks": "\n\nSee {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n\n",
      "examples": {
        "javascript": "const minterAddresses = await contract.roles.get(\"minter\");"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroles.get"
      }
    },
    {
      "name": "getAll",
      "summary": "Call this to get get a list of addresses for all supported roles on the contract.\n\n",
      "remarks": "\n\nSee {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n\n",
      "examples": {
        "javascript": "const rolesAndMembers = await contract.roles.getAll();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroles.getall"
      }
    },
    {
      "name": "grant",
      "summary": "Call this to grant a role to a specific address.\n\n",
      "remarks": "\n\nMake sure you are sure you want to grant the role to the address.\n\n",
      "examples": {
        "javascript": "await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroles.grant"
      }
    },
    {
      "name": "revoke",
      "summary": "Call this to revoke a role from a specific address.\n\n",
      "remarks": "\n\n-- Caution --\n\nThis will let you remove yourself from the role, too. If you remove yourself from the admin role, you will no longer be able to administer the contract. There is no way to recover from this.\n\n",
      "examples": {
        "javascript": "await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroles.revoke"
      }
    },
    {
      "name": "setAll",
      "summary": "Call this to OVERWRITE the list of addresses that are members of specific roles.\n\nEvery role in the list will be overwritten with the new list of addresses provided with them. If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroles.setall"
      }
    }
  ],
  "Royalty": [
    {
      "name": "getDefaultRoyaltyInfo",
      "summary": "Gets the royalty recipient and BPS (basis points) of the contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroyalty.getdefaultroyaltyinfo"
      }
    },
    {
      "name": "getTokenRoyaltyInfo",
      "summary": "Gets the royalty recipient and BPS (basis points) of a particular token\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroyalty.gettokenroyaltyinfo"
      }
    },
    {
      "name": "setDefaultRoyaltyInfo",
      "summary": "Set the royalty recipient and fee for a contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "await contract.roles.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1% royalty fee\n  fee_recipient: \"0x...\", // the fee recipient\n});"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroyalty.setdefaultroyaltyinfo"
      }
    },
    {
      "name": "setTokenRoyaltyInfo",
      "summary": "Set the royalty recipient and fee for a particular token\n\n",
      "remarks": null,
      "examples": {
        "javascript": "await contract.roles.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 100, // 1% royalty fee\n  fee_recipient: \"0x...\", // the fee recipient\n});"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.contractroyalty.settokenroyaltyinfo"
      }
    }
  ],
  "ERC1155ClaimableWithConditions": [
    {
      "name": "claimConditions",
      "summary": "Configure claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.erc1155.claimConditions.set(tokenId, claimConditions);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.droperc1155claimconditions"
      }
    }
  ],
  "ERC1155Revealable": [
    {
      "name": "revealer",
      "summary": "Delayed reveal\n\n",
      "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
      "examples": {
        "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.erc1155.drop.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.erc1155.revealer.reveal(batchId, \"my secret password\");"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.delayedreveal"
      }
    }
  ],
  "ERC1155SignatureMintable": [
    {
      "name": "signature",
      "summary": "Signature Minting\n\n",
      "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
      "examples": {
        "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature().generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155signaturemintable"
      }
    }
  ],
  "ERC1155": [
    {
      "name": "balanceOf",
      "summary": "Get NFT Balance\n\n",
      "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
      "examples": {
        "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.erc1155.balanceOf(walletAddress, tokenId);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.balanceof"
      }
    },
    {
      "name": "get",
      "summary": "Get a single NFT Metadata\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const nft = await contract.erc1155.get(0);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.get"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer a single NFT\n\n",
      "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.erc1155.transfer(toAddress, tokenId, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.transfer"
      }
    }
  ],
  "ERC1155Burnable": [
    {
      "name": "burn",
      "summary": "Burn a specified amount of a NFTs\n\n",
      "remarks": "\n\nBurn the specified NFTs from the connected wallet\n\n",
      "examples": {
        "javascript": "// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of the NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.erc1155.burn(tokenId, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.burn"
      }
    },
    {
      "name": "burnBatch",
      "summary": "Burn a batch of NFTs\n\n",
      "remarks": "\n\nBurn the batch NFTs from the connected wallet\n\n",
      "examples": {
        "javascript": "// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.erc1155.burnBatch(tokenIds, amounts);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.burnbatch"
      }
    },
    {
      "name": "burnBatchFrom",
      "summary": "Burn a batch of NFTs\n\n",
      "remarks": "\n\nBurn the batch NFTs from the specified wallet\n\n",
      "examples": {
        "javascript": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.burnbatchfrom"
      }
    },
    {
      "name": "burnFrom",
      "summary": "Burn a specified amount of a NFTs\n\n",
      "remarks": "\n\nBurn the specified NFTs from a specified wallet\n\n",
      "examples": {
        "javascript": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of this NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.erc1155.burnFrom(account, tokenId, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.burnfrom"
      }
    }
  ],
  "ERC1155Claimable": [
    {
      "name": "claim",
      "summary": "Claim NFTs\n\n",
      "remarks": "\n\nLet the connected wallet claim NFTs.\n\n",
      "examples": {
        "javascript": "const tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.erc1155.claim(tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.claim"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim NFTs to a specific Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.erc1155.claimTo(address, tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.claimto"
      }
    }
  ],
  "ERC1155Enumerable": [
    {
      "name": "getAll",
      "summary": "Get All NFTs\n\n",
      "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
      "examples": {
        "javascript": "const nfts = await contract.erc1155.getAll();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.getall"
      }
    },
    {
      "name": "getOwned",
      "summary": "Get Owned NFTs\n\n",
      "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.erc1155.getOwned(address);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.getowned"
      }
    }
  ],
  "ERC1155LazyMintable": [
    {
      "name": "lazyMint",
      "summary": "Create a batch of NFTs to be claimed in the future\n\n",
      "remarks": "\n\nCreate batch allows you to create a batch of many NFTs in one transaction.\n\n",
      "examples": {
        "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.lazymint"
      }
    }
  ],
  "ERC1155Mintable": [
    {
      "name": "mint",
      "summary": "Mint an NFT with a limited supply\n\n",
      "remarks": "\n\nMint an NFT with a limited supply to the connected wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.mint"
      }
    },
    {
      "name": "mintAdditionalSupply",
      "summary": "Increase the supply of an existing NFT\n\n",
      "remarks": "\n\nIncrease the supply of an existing NFT and mint it to the connected wallet address\n\n",
      "examples": {
        "javascript": "const tokenId = 0;\nconst additionalSupply = 1000;\nawait contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.mintadditionalsupply"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint an NFT with a limited supply\n\n",
      "remarks": "\n\nMint an NFT with a limited supply to a specified wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.mintto"
      }
    }
  ],
  "ERC1155BatchMintable": [
    {
      "name": "mintBatch",
      "summary": "Mint Many NFTs with limited supplies\n\n",
      "remarks": "\n\nMint many different NFTs with limited supplies to the connected wallet.\n\n",
      "examples": {
        "javascript": "// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.erc1155.mintBatch(metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.mintbatch"
      }
    },
    {
      "name": "mintBatchTo",
      "summary": "Mint Many NFTs with limited supplies\n\n",
      "remarks": "\n\nMint many different NFTs with limited supplies to a specified wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc1155.mintbatchto"
      }
    }
  ],
  "ERC20ClaimableWithConditions": [
    {
      "name": "claimConditions",
      "summary": "Configure claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.erc20.claimConditions.set(claimConditions);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.dropclaimconditions"
      }
    },
    {
      "name": "claim",
      "summary": "Claim a certain amount of tokens to the connected Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.erc20.claim(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.claim"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim a certain amount of tokens to a specific Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.erc20.claim(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.claimto"
      }
    }
  ],
  "ERC20SignatureMintable": [
    {
      "name": "signature",
      "summary": "Signature Minting\n\n",
      "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
      "examples": {
        "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature().generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.erc20.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20signaturemintable"
      }
    }
  ],
  "ERC20": [
    {
      "name": "allowance",
      "summary": "Get Token Allowance\n\n",
      "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.erc20.allowance(spenderAddress);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.allowance"
      }
    },
    {
      "name": "allowanceOf",
      "summary": "Get Token Allowance\n\n",
      "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.erc20.allowanceOf(owner, spender);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.allowanceof"
      }
    },
    {
      "name": "balance",
      "summary": "Get Token Balance for the currently connected wallet\n\n",
      "remarks": "\n\nGet a wallets token balance.\n\n",
      "examples": {
        "javascript": "const balance = await contract.erc20.balance();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.balance"
      }
    },
    {
      "name": "balanceOf",
      "summary": "Get Token Balance\n\n",
      "remarks": "\n\nGet a wallets token balance.\n\n",
      "examples": {
        "javascript": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.erc20.balanceOf(walletAddress);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.balanceof"
      }
    },
    {
      "name": "get",
      "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const token = await contract.erc20.get();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.get"
      }
    },
    {
      "name": "setAllowance",
      "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.erc20.setAllowance(spenderAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.setallowance"
      }
    },
    {
      "name": "totalSupply",
      "summary": "The total supply for this Token\n\n",
      "remarks": "\n\nGet how much supply has been minted\n\n",
      "examples": {
        "javascript": "const balance = await contract.erc20.totalSupply();"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.totalsupply"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer Tokens\n\n",
      "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.erc20.transfer(toAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.transfer"
      }
    },
    {
      "name": "transferFrom",
      "summary": "Transfer Tokens From Address\n\n",
      "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
      "examples": {
        "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.erc20.transferFrom(fromAddress, toAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.transferfrom"
      }
    }
  ],
  "ERC20Burnable": [
    {
      "name": "burn",
      "summary": "Burn Tokens\n\n",
      "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
      "examples": {
        "javascript": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.erc20.burn(amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.burn"
      }
    },
    {
      "name": "burnFrom",
      "summary": "Burn Tokens\n\n",
      "remarks": "\n\nBurn tokens held by the specified wallet\n\n",
      "examples": {
        "javascript": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.erc20.burnFrom(holderAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.burnfrom"
      }
    }
  ],
  "ERC20Mintable": [
    {
      "name": "mint",
      "summary": "Mint Tokens\n\n",
      "remarks": "\n\nMint tokens to the connected wallet.\n\n",
      "examples": {
        "javascript": "const amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.erc20.mint(toAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.mint"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint Tokens\n\n",
      "remarks": "\n\nMint tokens to a specified address.\n\n",
      "examples": {
        "javascript": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.erc20.mintTo(toAddress, amount);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.mintto"
      }
    }
  ],
  "ERC20BatchMintable": [
    {
      "name": "mintBatchTo",
      "summary": "Mint Tokens To Many Wallets\n\n",
      "remarks": "\n\nMint tokens to many wallets in one transaction.\n\n",
      "examples": {
        "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc20.mintbatchto"
      }
    }
  ],
  "ERC721ClaimableWithConditions": [
    {
      "name": "claimConditions",
      "summary": "Configure claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.erc721.claimConditions.set(claimConditions);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.dropclaimconditions"
      }
    }
  ],
  "ERC721Revealable": [
    {
      "name": "revealer",
      "summary": "Delayed reveal\n\n",
      "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
      "examples": {
        "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.erc721.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.erc721.revealer.reveal(batchId, \"my secret password\");"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.delayedreveal"
      }
    }
  ],
  "ERC721SignatureMint": [
    {
      "name": "signature",
      "summary": "Signature Minting\n\n",
      "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
      "examples": {
        "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature().generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721withquantitysignaturemintable"
      }
    }
  ],
  "ERC721": [
    {
      "name": "balanceOf",
      "summary": "Get NFT Balance\n\n",
      "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
      "examples": {
        "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.erc721.balanceOf(walletAddress);\nconsole.log(balance);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.balanceof"
      }
    },
    {
      "name": "get",
      "summary": "Get a single NFT Metadata\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const tokenId = 0;\nconst nft = await contract.erc721.get(tokenId);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.get"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer a single NFT\n\n",
      "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
      "examples": {
        "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.erc721.transfer(walletAddress, tokenId);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.transfer"
      }
    }
  ],
  "ERC721Burnable": [
    {
      "name": "burn",
      "summary": "Burn a single NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const result = await contract.erc721.burn(tokenId);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.burn"
      }
    }
  ],
  "ERC721Claimable": [
    {
      "name": "claim",
      "summary": "Claim unique NFTs to the connected wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "javascript": "const quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.erc721.claim(quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.claim"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim unique NFTs to a specific Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.erc721.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.claimto"
      }
    }
  ],
  "ERC721Supply": [
    {
      "name": "getAll",
      "summary": "Get All Minted NFTs\n\n",
      "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
      "examples": {
        "javascript": "const nfts = await contract.erc721.getAll();\nconsole.log(nfts);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.getall"
      }
    }
  ],
  "ERC721Enumerable": [
    {
      "name": "getOwned",
      "summary": "Get Owned NFTs\n\n",
      "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.erc721.getOwned(address);\nconsole.log(nfts);"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.getowned"
      }
    }
  ],
  "ERC721LazyMintable": [
    {
      "name": "lazyMint",
      "summary": "Create a batch of unique NFTs to be claimed in the future\n\n",
      "remarks": "\n\nCreate batch allows you to create a batch of many unique NFTs in one transaction.\n\n",
      "examples": {
        "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.lazymint"
      }
    }
  ],
  "ERC721Mintable": [
    {
      "name": "mint",
      "summary": "Mint a unique NFT\n\n",
      "remarks": "\n\nMint a unique NFT to the connected wallet.\n\n",
      "examples": {
        "javascript": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.erc721.mint(metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.mint"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint a unique NFT\n\n",
      "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.erc721.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.mintto"
      }
    }
  ],
  "ERC721BatchMintable": [
    {
      "name": "mintBatchTo",
      "summary": "Mint Many unique NFTs\n\n",
      "remarks": "\n\nMint many unique NFTs at once to a specified wallet.\n\n",
      "examples": {
        "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
      },
      "reference": {
        "javascript": "https://docs.web3sdks.com/typescript/sdk.erc721.mintbatchto"
      }
    }
  ]
}