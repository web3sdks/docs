{
  "Web3sdksSDK": {
    "name": "Web3sdksSDK",
    "summary": "The main entry-point for the web3sdks Solana SDK.\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\n// Create SDK on specified network, and then pass a signer\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\n// Signer can be a keypair or browser wallet adapter\nsdk.wallet.connect(signer);"
    },
    "methods": [
      {
        "name": "getProgram",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");",
          "react": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram"
        }
      },
      {
        "name": "getProgram",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");",
          "react": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram"
        }
      },
      {
        "name": "getProgram",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");",
          "react": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{program_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogram"
        }
      },
      {
        "name": "getProgramWithIdl",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "import idl from \"path/to/idl.json\"\n\n// Alternatively, you can pass in your own IDL\nconst program = await sdk.getProgramWithIdl(address, idl);",
          "react": "import idl from \"path/to/idl.json\"\n\n// Alternatively, you can pass in your own IDL\nconst program = await sdk.getProgramWithIdl(address, idl);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogramwithidl",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.web3sdkssdk.getprogramwithidl"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.Web3sdksSDK"
    }
  },
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "A collection of associated NFTs\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your NFT collection program\nconst program = await sdk.getProgram(\"{{program_address}}\", \"nft-collection\");",
      "react": "import { useProgram } from \"@web3sdks/react/solana\"\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\", \"nft-collection\")\n  ...\n}"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the NFT balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(nftAddress);\nconsole.log(balance);",
          "react": "// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(nftAddress);\nconsole.log(balance);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.balance",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.balance"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get the NFT balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address of the wallet to get the balance of\nconst walletAddress = \"...\"\n// Specify the mint address of the NFT to get the balance of\nconst nftAddress = \"...\"\nconst balance = await program.balanceOf(walletAddress, nftAddress);",
          "react": "// Specify the address of the wallet to get the balance of\nconst walletAddress = \"...\"\n// Specify the mint address of the NFT to get the balance of\nconst nftAddress = \"...\"\nconst balance = await program.balanceOf(walletAddress, nftAddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.balanceof",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.balanceof"
        }
      },
      {
        "name": "burn",
        "summary": "Burn an NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address of the NFT to burn\nconst nftAddress = \"...\"\n// And send the actual burn transaction\nconst tx = await program.burn(nftAddress);",
          "react": "// Specify the address of the NFT to burn\nconst nftAddress = \"...\"\n// And send the actual burn transaction\nconst tx = await program.burn(nftAddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.burn",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.burn"
        }
      },
      {
        "name": "get",
        "summary": "Get the metadata for a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\nconsole.log(nft.metadata.name);\nconsole.log(nft.owner);",
          "react": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\nconsole.log(nft.metadata.name);\nconsole.log(nft.owner);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.get",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.get"
        }
      },
      {
        "name": "getAll",
        "summary": "Get the metadata for all NFTs on this collection\n\n",
        "remarks": "\n\nThis method is paginated. Use the `start` and `count` properties of the queryParams object to control pagination. By default the first 100 NFTs are returned\n\n",
        "examples": {
          "javascript": "// Get all the NFTs that have been minted on this contract\nconst nfts = await program.getAll();\nconsole.log(nfts[0].metadata.name);\nconsole.log(nfts[0].owner);",
          "react": "import { useProgram, useNFTs } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { data: metadata, isLoading } = useNFTs(program);\n\n  return (\n    <pre>{JSON.stringify(metadata)}</pre>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getall",
          "react": "https://docs.web3sdks.com/react/solana/react.usenfts"
        }
      },
      {
        "name": "getCreators",
        "summary": "Get the creators of this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const creators = await program.getCreators();\nconsole.log(creators);",
          "react": "const creators = await program.getCreators();\nconsole.log(creators);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getcreators",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getcreators"
        }
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata);",
          "react": "const metadata = await program.getMetadata();\nconsole.log(metadata);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getmetadata",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getmetadata"
        }
      },
      {
        "name": "getRoyalty",
        "summary": "Get the royalty basis points for this collection\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const royalty = await program.getRoyalty();\nconsole.log(royalty);",
          "react": "const royalty = await program.getRoyalty();\nconsole.log(royalty);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getroyalty",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.getroyalty"
        }
      },
      {
        "name": "mint",
        "summary": "Mint NFTs to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Add the metadata of your NFT\nconst metadata = {\n  name: \"NFT #1\",\n  description: \"My first NFT!\",\n  image: readFileSync(\"files/image.jpg\"),\n  properties: [\n    {\n       name: \"coolness\",\n       value: \"very cool!\"\n    }\n  ]\n}\n\n// Then mint the new NFT and get its address\nconst address = await program.mint(metadata);\nconsole.log(address);",
          "react": "// Add the metadata of your NFT\nconst metadata = {\n  name: \"NFT #1\",\n  description: \"My first NFT!\",\n  image: readFileSync(\"files/image.jpg\"),\n  properties: [\n    {\n       name: \"coolness\",\n       value: \"very cool!\"\n    }\n  ]\n}\n\n// Then mint the new NFT and get its address\nconst address = await program.mint(metadata);\nconsole.log(address);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mint",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mint"
        }
      },
      {
        "name": "mintAdditionalSupply",
        "summary": "Mint additional supply of an NFT to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The address of the already minted NFT\nconst nftAddress = \"...\"\n// The amount of additional NFTs to mint\nconst amount = 1;\n// Mint an additional NFT of the original NFT\nconst addresses = await program.mintAdditionalSupply(nftAddress, amount);",
          "react": "// The address of the already minted NFT\nconst nftAddress = \"...\"\n// The amount of additional NFTs to mint\nconst amount = 1;\n// Mint an additional NFT of the original NFT\nconst addresses = await program.mintAdditionalSupply(nftAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mintadditionalsupply",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mintadditionalsupply"
        }
      },
      {
        "name": "mintAdditionalSupplyTo",
        "summary": "Mint additional supply of an NFT to the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify who to mint the additional NFT to\nconst to = \"...\"\n// The address of the already minted NFT\nconst nftAddress = \"...\"\n* // The amount of additional NFTs to mint\nconst amount = 1;\n// Mint an additional NFT of the original NFT\nconst addresses = await program.mintAdditionalSupplyTo(to, nftAddress, amount);",
          "react": "// Specify who to mint the additional NFT to\nconst to = \"...\"\n// The address of the already minted NFT\nconst nftAddress = \"...\"\n* // The amount of additional NFTs to mint\nconst amount = 1;\n// Mint an additional NFT of the original NFT\nconst addresses = await program.mintAdditionalSupplyTo(to, nftAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mintadditionalsupplyto",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mintadditionalsupplyto"
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint an NFT to the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify who to mint the NFT to\nconst to = \"...\";\n\n// Add the metadata of your NFT\nconst metadata = {\n  name: \"NFT #1\",\n  description: \"My first NFT!\",\n  image: readFileSync(\"files/image.jpg\"),\n  properties: [\n    {\n       name: \"coolness\",\n       value: \"very cool!\"\n    }\n  ]\n}\n\n// Then mint the new NFT and get its address\nconst address = await program.mintTo(to, metadata);\nconsole.log(address);",
          "react": "import { useProgram, useMintNFT } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { mutateAsync: mintNFT, isLoading, error } = useMintNFT(program);\n\n  return (\n    <button onClick={() => mintNFT({ metadata: { name: \"First NFT\" } })}>\n      Mint\n    </button>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.mintto",
          "react": "https://docs.web3sdks.com/react/solana/react.usemintnft"
        }
      },
      {
        "name": "ownerOf",
        "summary": "Get the current owner of the given NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nftAddress = \"...\"\nconst owner = await program.ownerOf(nftAddress);\nconsole.log(owner);",
          "react": "const nftAddress = \"...\"\nconst owner = await program.ownerOf(nftAddress);\nconsole.log(owner);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.ownerof",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.ownerof"
        }
      },
      {
        "name": "supplyOf",
        "summary": "Get the supply of NFT editions minted from a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = \"...\";\nconst supply = await program.supplyOf(address);",
          "react": "const address = \"...\";\nconst supply = await program.supplyOf(address);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.supplyof",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.supplyof"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified NFTs to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The wallet address to transfer the NFTs to\nconst to = \"...\";\n// The mint address of the NFT to transfer\nconst nftAddress = \"...\";\nconst tx = await program.transfer(to, nftAddress);",
          "react": "import { useProgram, useTransferNFT } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { mutateAsync: transfer, isLoading, error } = useTransferNFT(program);\n\n  return (\n    <button\n      onClick={() => transfer({\n        receiverAddress: \"{{wallet_address}}\",\n        tokenAddress: \"...\"\n      })}\n    >\n      Transfer\n    </button>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftcollection.transfer",
          "react": "https://docs.web3sdks.com/react/solana/react.usetransfernft"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.NFTCollection"
    }
  },
  "Token": {
    "name": "Token",
    "summary": "Standard token or cryptocurrency.\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your token program\nconst program = await sdk.getProgram(\"{{program_address}}\", \"token\");",
      "react": "import { useProgram } from \"@web3sdks/react/solana\"\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\", \"token\")\n  ...\n}"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the token balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await program.balance();\nconsole.log(balance.displayValue);",
          "react": "const balance = await program.balance();\nconsole.log(balance.displayValue);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.balance",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.token.balance"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get the token balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = \"...\"\nconst balance = await program.balanceOf(address);\nconsole.log(balance.displayValue);",
          "react": "import { useProgram, useTokenBalance } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { data: balance, isLoading } = useTokenBalance(program, \"{{wallet_address}}\");\n\n  return (\n    <p>{balance}</p>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.balanceof",
          "react": "https://docs.web3sdks.com/react/solana/react.usetokenbalance"
        }
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this token including the name, supply, and decimals.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata.supply);\nconsole.log(metadata.decimals);",
          "react": "const metadata = await program.getMetadata();\nconsole.log(metadata.supply);\nconsole.log(metadata.decimals);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.getmetadata",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.token.getmetadata"
        }
      },
      {
        "name": "mint",
        "summary": "Mints the specified amount of new tokens to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the amount of tokens to mint\nconst amount = 1;\n// And then you can mint the tokens\nconst tx = await program.mint(amount);",
          "react": "// Specify the amount of tokens to mint\nconst amount = 1;\n// And then you can mint the tokens\nconst tx = await program.mint(amount);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.mint",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.token.mint"
        }
      },
      {
        "name": "mintTo",
        "summary": "Mints the specified amount of new tokens to a specific wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address to mint tokens to\nconst address = \"{{wallet_address}}\"\";\n// And the amount of tokens to mint\nconst amount = 1;\n// And then you can make a mint transaction\nconst tx = await program.mintTo(address, 1);",
          "react": "import { useProgram, useMintToken } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { mutateAsync: mint, isLoading, error } = useMintToken(program);\n\n  return (\n    <button onClick={() => mint({ to: \"{{wallet_address}}\", amount: 1 })}>\n      Mint\n    </button>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.mintto",
          "react": "https://docs.web3sdks.com/react/solana/react.useminttoken"
        }
      },
      {
        "name": "totalSupply",
        "summary": "Get the total minted supply of this token\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const supply = await program.totalSupply();",
          "react": "import { useProgram, useMintToken } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { data: totalSupply, isLoading } = useTokenSupply(program);\n\n  return (\n    <p>{totalSupply}</p>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.totalsupply",
          "react": "https://docs.web3sdks.com/react/solana/react.usetokensupply"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified amount of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address to transfer tokens to\nconst to = \"...\";\n// And the amount of tokens to transfer\nconst amount = 1;\n// And then you can make the transfer transaction\nconst tx = await program.transfer(to, amount);",
          "react": "import { useProgram, useTransferToken } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { mutateAsync: transfer, isLoading, error } = useTransferToken(program);\n\n  return (\n    <button onClick={() => transfer({ to: \"{{wallet_address}}\", amount: 1 })}>\n      Transfer\n    </button>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.token.transfer",
          "react": "https://docs.web3sdks.com/react/solana/react.usetransfertoken"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.Token"
    }
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "A collection of NFTs that can be lazy minted and claimed\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your NFT Drop program\nconst program = await sdk.getProgram(\"{{program_address}}\", \"nft-drop\");",
      "react": "import { useProgram } from \"@web3sdks/react/solana\"\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\", \"nft-drop\")\n  ...\n}"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the NFT balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(nftAddress);\nconsole.log(balance);",
          "react": "// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(nftAddress);\nconsole.log(balance);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.balance",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.balance"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get the NFT balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The address of the wallet to check the balance of\nconst walletAddress = \"...\"\n// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the actual NFT balance of the specified wallet\nconst balance = await program.balanceOf(walletAddress, nftAddress);",
          "react": "// The address of the wallet to check the balance of\nconst walletAddress = \"...\"\n// The mint address of the NFT to check the balance of\nconst nftAddress = \"...\"\n// Get the actual NFT balance of the specified wallet\nconst balance = await program.balanceOf(walletAddress, nftAddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.balanceof",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.balanceof"
        }
      },
      {
        "name": "burn",
        "summary": "Burn an NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address of the NFT to burn\nconst nftAddress = \"...\"\n// And send the actual burn transaction\nconst tx = await program.burn(nftAddress);",
          "react": "// Specify the address of the NFT to burn\nconst nftAddress = \"...\"\n// And send the actual burn transaction\nconst tx = await program.burn(nftAddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.burn",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.burn"
        }
      },
      {
        "name": "claim",
        "summary": "Claim an NFT from the drop with connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the quantity of NFTs to claim\nconst quantity = 1;\n// Claim NFTs and get their mint addresses\nconst claimedAddresses = await program.claim(quantity);\nconsole.log(\"Claimed NFT at address\", claimedAddresses[0]);",
          "react": "// Specify the quantity of NFTs to claim\nconst quantity = 1;\n// Claim NFTs and get their mint addresses\nconst claimedAddresses = await program.claim(quantity);\nconsole.log(\"Claimed NFT at address\", claimedAddresses[0]);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.claim",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.claim"
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim an NFT from the drop for the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify which address to claim the NFTs to\nconst receiverAddress =  \"...\";\n// Claim the NFTs to the specified wallet and get the mint addresses of the NFTs\nconst claimedAddresses = await program.claimTo(receiverAddress, 1);\nconsole.log(\"Claimed NFT at address\", claimedAddresses[0]);",
          "react": "import { useProgram, useClaimNFT } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { mutateAsync: claim, isLoading, error } = useClaimNFT(program);\n\n  return (\n    <button onClick={() => claim({amount: 1})}>\n      Claim\n    </button>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.claimto",
          "react": "https://docs.web3sdks.com/react/solana/react.useclaimnft"
        }
      },
      {
        "name": "get",
        "summary": "Get the metadata for a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\n\nconsole.log(nft.name);",
          "react": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\n\nconsole.log(nft.name);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.get",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.get"
        }
      },
      {
        "name": "getAll",
        "summary": "Get the metadata for all NFTs on this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get all the NFTs that have been minted on this contract\nconst nfts = await program.getAll();\n\nconsole.log(nfts[0].metadata.name);",
          "react": "import { useProgram, useNFTs } from \"@web3sdks/react/solana\";\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\");\n  const { data: metadata, isLoading } = useNFTs(program);\n\n  return (\n    <pre>{JSON.stringify(metadata)}</pre>\n  )\n}"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getall",
          "react": "https://docs.web3sdks.com/react/solana/react.usenfts"
        }
      },
      {
        "name": "getAllClaimed",
        "summary": "Get the metadata for all the claimed NFTs on this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get all the NFTs that have already been claimed from this drop\nconst nfts = await program.getAllClaimed();\nconsole.log(nfts[0].name)",
          "react": "// Get all the NFTs that have already been claimed from this drop\nconst nfts = await program.getAllClaimed();\nconsole.log(nfts[0].name)"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getallclaimed",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getallclaimed"
        }
      },
      {
        "name": "getCreators",
        "summary": "Get the creators of this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const creators = await program.getCreators();\nconsole.log(creators);",
          "react": "const creators = await program.getCreators();\nconsole.log(creators);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getcreators",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getcreators"
        }
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata.name);",
          "react": "const metadata = await program.getMetadata();\nconsole.log(metadata.name);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getmetadata",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getmetadata"
        }
      },
      {
        "name": "getRoyalty",
        "summary": "Get the royalty basis points for this collection\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const royalty = await program.getRoyalty();\nconsole.log(royalty);",
          "react": "const royalty = await program.getRoyalty();\nconsole.log(royalty);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getroyalty",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.getroyalty"
        }
      },
      {
        "name": "lazyMint",
        "summary": "Lazy mint NFTs to be claimed later\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Add the metadata of your NFTs\nconst metadata = [\n  {\n    name: \"NFT #1\",\n    description: \"My first NFT!\",\n    image: readFileSync(\"files/image.jpg\"),\n    properties: [\n      {\n        name: \"coolness\",\n        value: \"very cool!\"\n      }\n    ]\n  }\n];\n\n// And lazy mint NFTs to your program\nconst tx = await program.lazyMint(metadatas);",
          "react": "// Add the metadata of your NFTs\nconst metadata = [\n  {\n    name: \"NFT #1\",\n    description: \"My first NFT!\",\n    image: readFileSync(\"files/image.jpg\"),\n    properties: [\n      {\n        name: \"coolness\",\n        value: \"very cool!\"\n      }\n    ]\n  }\n];\n\n// And lazy mint NFTs to your program\nconst tx = await program.lazyMint(metadatas);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.lazymint",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.lazymint"
        }
      },
      {
        "name": "ownerOf",
        "summary": "Get the current owner of the given NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nftAddress = \"...\"\nconst owner = await program.ownerOf(nftAddress);\nconsole.log(owner);",
          "react": "const nftAddress = \"...\"\nconst owner = await program.ownerOf(nftAddress);\nconsole.log(owner);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.ownerof",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.ownerof"
        }
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the total claimed supply of this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the total number of lazy minted NFTs that have already been claimed\nconst supply = await program.totalClaimedSupply();",
          "react": "// Get the total number of lazy minted NFTs that have already been claimed\nconst supply = await program.totalClaimedSupply();"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalclaimedsupply",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalclaimedsupply"
        }
      },
      {
        "name": "totalSupply",
        "summary": "Get the total minted supply of this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the total number of NFTs that have been minted on this drop\nconst supply = await program.totalSupply();",
          "react": "// Get the total number of NFTs that have been minted on this drop\nconst supply = await program.totalSupply();"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalsupply",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalsupply"
        }
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the total unclaimed supply of this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the total number of lazy minted NFTs that aren't yet claimed\nconst supply = await program.totalUnclaimedSupply();",
          "react": "// Get the total number of lazy minted NFTs that aren't yet claimed\nconst supply = await program.totalUnclaimedSupply();"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalunclaimedsupply",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.totalunclaimedsupply"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified NFTs to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The wallet address to transfer the NFTs to\nconst to = \"...\";\n// The mint address of the NFT to transfer\nconst nftAddress = \"...\";\nconst tx = await program.transfer(to, nftAddress);",
          "react": "// The wallet address to transfer the NFTs to\nconst to = \"...\";\n// The mint address of the NFT to transfer\nconst nftAddress = \"...\";\nconst tx = await program.transfer(to, nftAddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.transfer",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.nftdrop.transfer"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.NFTDrop"
    }
  },
  "Program": {
    "name": "Program",
    "summary": "Dynamic interface for interacting with Solana programs.\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your program\nconst program = await sdk.getProgram(\"{{program_address}}\");",
      "react": "import { useProgram } from \"@web3sdks/react/solana\"\n\nexport default function Component() {\n  const { program } = useProgram(\"{{program_address}}\")\n  ...\n}"
    },
    "methods": [
      {
        "name": "call",
        "summary": "Call a function on this program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const counterAccount = Keypair.generate();\nawait program.call(\"increment\", {\n  // We need to pass in the public keys of any accounts to interact with\n  accounts: {\n    counterAccount: counterAccount.publicKey.toBase58(),\n  },\n  // As well as the arguments to pass to the data parameters\n  data: [\"...\"],\n  // And the signer of the account that will be signing the message\n  signers: [counterAccount]\n})",
          "react": "const counterAccount = Keypair.generate();\nawait program.call(\"increment\", {\n  // We need to pass in the public keys of any accounts to interact with\n  accounts: {\n    counterAccount: counterAccount.publicKey.toBase58(),\n  },\n  // As well as the arguments to pass to the data parameters\n  data: [\"...\"],\n  // And the signer of the account that will be signing the message\n  signers: [counterAccount]\n})"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.program.call",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.program.call"
        }
      },
      {
        "name": "fetch",
        "summary": "Read account data associated with this program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const accountAddress = \"...\";\n// Get the counterAccount at specified address\nconst counterAccount = await program.fetch(\"counterAccount\", accountaddress);",
          "react": "const accountAddress = \"...\";\n// Get the counterAccount at specified address\nconst counterAccount = await program.fetch(\"counterAccount\", accountaddress);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.program.fetch",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.program.fetch"
        }
      },
      {
        "name": "fetchMultiple",
        "summary": "Read multiple accounts data associated with this program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const accountAddresses = [\"...\", \"...\"];\nconst counterAccounts = await program.fetchMultiple(\"counterAccount\", accountAddresses);",
          "react": "const accountAddresses = [\"...\", \"...\"];\nconst counterAccounts = await program.fetchMultiple(\"counterAccount\", accountAddresses);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.program.fetchmultiple",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.program.fetchmultiple"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.Program"
    }
  },
  "UserWallet": {
    "name": "UserWallet",
    "summary": "Handle and view info about the wallet connected to the SDK.\n\n",
    "examples": {
      "javascript": "// Connect a wallet to the SDK, pass in a keypair or browser wallet adapter\nsdk.wallet.connect(signer)\n\n// Then you can read data about the connected wallet\nconst address = sdk.wallet.getAddress();"
    },
    "methods": [
      {
        "name": "connect",
        "summary": "Connect a signer to the SDK. Can pass in a keypair or browser wallet adapter\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const signer = Keypair.generate();\nsdk.wallet.connect(signer);",
          "react": "const sdk = useSDK();\n\nconst signer = Keypair.generate();\nsdk.wallet.connect(signer);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.connect",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.connect"
        }
      },
      {
        "name": "disconnect",
        "summary": "Disconnect the connect wallet from the SDK\n\n",
        "remarks": null,
        "examples": {
          "javascript": "sdk.wallet.disconnect();",
          "react": "sdk.wallet.disconnect();"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.disconnect",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.disconnect"
        }
      },
      {
        "name": "getAddress",
        "summary": "Get the address of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = sdk.wallet.getAddress()",
          "react": "const sdk = useSDK();\n\nconst address = sdk.wallet.getAddress()"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getaddress",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getaddress"
        }
      },
      {
        "name": "getBalance",
        "summary": "Get the native balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await sdk.wallet.getBalance();\nconsole.log(balance.displayValue);",
          "react": "const sdk = useSDK();\n\nconst balance = await sdk.wallet.getBalance();\nconsole.log(balance.displayValue);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getbalance",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getbalance"
        }
      },
      {
        "name": "getSigner",
        "summary": "Get the connected signer\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const signer = sdk.wallet.getSigner()",
          "react": "const sdk = useSDK();\n\nconst signer = sdk.wallet.getSigner()"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getsigner",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.userwallet.getsigner"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.UserWallet"
    }
  },
  "Deployer": {
    "name": "Deployer",
    "summary": "Deploy new programs\n\n",
    "examples": {
      "javascript": "import { Web3sdksSDK } from \"@web3sdks/sdk/solana\";\n\n// Instantiate the SDK and pass in a signer\nconst sdk = Web3sdksSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Define the metadata for your program\nconst metadata = {\n  name: \"NFT Contract\",\n  image: readFileSync(\"files/image.jpg\"),\n};\n\n// And deploy a new program from the connected wallet\nconst address = await sdk.deployer.createNftCollection(metadata);"
    },
    "methods": [
      {
        "name": "createNftCollection",
        "summary": "Create a new NFT collection program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"My NFT Collection\",\n  symbol: \"NFT\",\n};\n\nconst address = await sdk.deployer.createNftCollection(metadata);",
          "react": "const sdk = useSDK();\n\nconst metadata = {\n  name: \"My NFT Collection\",\n  symbol: \"NFT\",\n};\n\nconst address = await sdk.deployer.createNftCollection(metadata);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createnftcollection",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createnftcollection"
        }
      },
      {
        "name": "createNftDrop",
        "summary": "Create a new NFT drop program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"My NFT Drop\",\n  symbol: \"NFT\",\n  totalSupply: 5,\n};\n\nconst address = await sdk.deployer.createNftDrop(metadata);",
          "react": "const sdk = useSDK();\n\nconst metadata = {\n  name: \"My NFT Drop\",\n  symbol: \"NFT\",\n  totalSupply: 5,\n};\n\nconst address = await sdk.deployer.createNftDrop(metadata);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createnftdrop",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createnftdrop"
        }
      },
      {
        "name": "createToken",
        "summary": "Create a new token program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"My Token\",\n  symbol: \"TKN\",\n  initialSupply: 100,\n};\n\nconst address = await sdk.deployer.createToken(metadata);",
          "react": "const sdk = useSDK();\n\nconst metadata = {\n  name: \"My Token\",\n  symbol: \"TKN\",\n  initialSupply: 100,\n};\n\nconst address = await sdk.deployer.createToken(metadata);"
        },
        "reference": {
          "javascript": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createtoken",
          "react": "https://docs.web3sdks.com/solana-sdk/sdk.deployer.createtoken"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.web3sdks.com/solana-sdk/sdk.Deployer"
    }
  }
}